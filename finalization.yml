# finalization.yml
---
# Ansible playbook for finalizing steps
- name: Finalize Kubernetes cluster setup from finalization workbook
  hosts: 192.168.56.100
  become: true
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  collection:
    - kubernetes.core

  vars:
    metallb_url: "https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml"  # according to assignment
    metallb_crd: "/tmp/metallb-native.yaml"
    ip_pool_range: "192.168.56.90-192.168.56.99"  # According to assignment
    
  tasks:
    # Install kubernetes (python) module
    - name: Ensure pip is installed
      apt:
        name: python3-pip
        state: present
        
    - name: Install Python kubernetes module
      pip:
        name: kubernetes
        state: present

    # A2: Step 20
    - name: Download MetalLB CRDs
      get_url:
        url: "{{ metallb_url }}"
        dest: "{{ metallb_crd }}"
        mode: '0644'

    - name: Apply MetalLB CRDs
      kubernetes.core.k8s:
        state: present
        src: "{{ metallb_crd }}"

    - name: Wait for MetalLB controller
      shell: |
        kubectl wait -n metallb-system \
          -l app=metallb,component=controller \
          --for=condition=ready pod --timeout=180s
      register: metallb_ready

    - name: Create MetalLB IPAddressPool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: default-pool
            namespace: metallb-system
          spec:
            addresses:
            - "{{ ip_pool_range }}"

    - name: Create MetalLB L2Advertisement
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: l2-adv
            namespace: metallb-system
          spec:
            ipAddressPools:
            - default-pool

    # A2: Step 21
    - name: Add ingress-nginx Helm repository
      kubernetes.core.helm_repository:
        name: ingress-nginx
        repo_url: https://kubernetes.github.io/ingress-nginx

    - name: Update Helm repositories
      kubernetes.core.helm_repository_update:
        update_repos: all

    - name: Install Nginx Ingress Controller via Helm
      kubernetes.core.helm:
        name: ingress-nginx
        chart_ref: ingress-nginx/ingress-nginx
        release_namespace: ingress-nginx
        create_namespace: true
        values: "{{ {'controller': {'service': {'loadBalancerIP': ingress_ip}}} if ingress_ip is defined else {} }}"

    # A2: Step 22
    - name: Add kubernetes-dashboard Helm repository
      kubernetes.core.helm_repository:
        name: kubernetes-dashboard
        repo_url: https://kubernetes.github.io/dashboard/

    - name: Deploy Kubernetes Dashboard via Helm
      kubernetes.core.helm:
        name: kubernetes-dashboard
        chart_ref: kubernetes-dashboard/kubernetes-dashboard
        release_namespace: kubernetes-dashboard
        create_namespace: true

    - name: Create ServiceAccount for dashboard login
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: admin-user
            namespace: kubernetes-dashboard

    - name: Create ClusterRoleBinding for admin-user
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: admin-user-binding
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: cluster-admin
          subjects:
          - kind: ServiceAccount
            name: admin-user
            namespace: kubernetes-dashboard

    - name: Create Ingress for Kubernetes Dashboard
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: kubernetes-dashboard-ingress
            namespace: kubernetes-dashboard
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
            - host: dashboard.local
              http:
                paths:
                - path: /
                  pathType: Prefix
                  backend:
                    service:
                      name: kubernetes-dashboard
                      port:
                        number: 443

    # A2: Step 23
    - name: Check if istioctl binary already exists
      stat:
        path: /home/vagrant/istio-1.25.2/bin/istioctl
      register: istioctl_binary

    - name: Download Istio CLI binary
      get_url:
        url: "https://github.com/istio/istio/releases/download/1.25.2/istio-1.25.2-linux-amd64.tar.gz"
        dest: "/tmp/istio-1.25.2-linux-amd64.tar.gz"
        mode: '0644'
      register: istio_download
      when: not istioctl_binary.stat.exists

    - name: Install Istio CLI binary
      unarchive:
        src: "/tmp/istio-1.25.2-linux-amd64.tar.gz"
        dest: /home/vagrant
        remote_src: true
      register: istio_unpacked
      when: not istioctl_binary.stat.exists and istio_download is changed

    - name: Add istioctl to PATH for vagrant
      lineinfile:
        dest: /home/vagrant/.bashrc
        line: 'export PATH=$PATH:/home/vagrant/istio-1.25.2/bin'
      when: istio_unpacked is changed

    - name: Check if Istio is already installed in the cluster
      kubernetes.core.k8s_info:
        kind: Namespace
        name: istio-system
      register: istio_namespace
      failed_when: false

    - name: Run istioctl install
      command: /home/vagrant/istio-1.25.2/bin/istioctl install --set profile=demo -y
      args:
        chdir: /home/vagrant/istio-1.25.2
      when: (istio_unpacked is changed or (istio_namespace.resources | length == 0))